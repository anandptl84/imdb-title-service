title.basics.path=static/title.basics.tsv
title.principal.cast.path=static/title.principals.tsv
title.ratings.path=static/title.ratings.tsv
name.basics.path=static/name.basics.tsv



server.port = 8080
# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
#spring.datasource.url = jdbc:mysql://localhost:3306/imdb_movies?useServerPrepStmts=false&rewriteBatchedStatements=true
spring.datasource.url = jdbc:mysql://test-mysql.cfqdpi5eyjla.us-east-1.rds.amazonaws.com:3306/imdb_movies?useServerPrepStmts=false&rewriteBatchedStatements=true

# Username and password
spring.datasource.username = imdb_movies_op2
spring.datasource.password = imdb_movies_op2

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = none

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

spring.jpa.properties.hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext
